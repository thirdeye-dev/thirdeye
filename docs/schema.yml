openapi: 3.0.3
info:
  title: ThirdEye
  version: 0.0.1
  description: ThirdEyeEye OpenAPI Documentation
paths:
  /authentication/google-callback:
    get:
      operationId: authentication_google_callback_retrieve
      tags:
      - authentication
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: authentication_google_callback_create
      tags:
      - authentication
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /authentication/login:
    post:
      operationId: authentication_login_create
      tags:
      - authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /authentication/logout:
    post:
      operationId: authentication_logout_create
      tags:
      - authentication
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /authentication/me:
    get:
      operationId: authentication_me_list
      tags:
      - authentication
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /authentication/token/refresh:
    post:
      operationId: authentication_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /monitoring/get_ioc_config:
    get:
      operationId: monitoring_get_ioc_config_retrieve
      tags:
      - monitoring
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IOC'
          description: ''
  /monitoring/set_ioc_alert:
    post:
      operationId: monitoring_set_ioc_alert_create
      tags:
      - monitoring
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /smartcontract/{id}:
    get:
      operationId: smartcontract_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - smartcontract
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartContract'
          description: ''
  /smartcontract/{id}/delete:
    delete:
      operationId: smartcontract_delete_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - smartcontract
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /smartcontract/{id}/update:
    put:
      operationId: smartcontract_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - smartcontract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartContract'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SmartContract'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SmartContract'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartContract'
          description: ''
    patch:
      operationId: smartcontract_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - smartcontract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSmartContract'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSmartContract'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSmartContract'
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartContract'
          description: ''
  /smartcontract/create:
    post:
      operationId: smartcontract_create_create
      tags:
      - smartcontract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SmartContract'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SmartContract'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SmartContract'
        required: true
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartContract'
          description: ''
  /smartcontract/list:
    get:
      operationId: smartcontract_list_list
      tags:
      - smartcontract
      security:
      - basicAuth: []
      - cookieAuth: []
      - tokenAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SmartContract'
          description: ''
components:
  schemas:
    IOC:
      type: object
      properties:
        name:
          type: string
        entrypoint:
          type: string
        description:
          type: string
        type:
          type: string
        params:
          type: object
          additionalProperties: {}
      required:
      - description
      - entrypoint
      - name
      - params
      - type
    Login:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
          minLength: 3
        password:
          type: string
          writeOnly: true
          maxLength: 68
          minLength: 6
        tokens:
          type: string
          readOnly: true
      required:
      - email
      - password
      - tokens
    PatchedSmartContract:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        address:
          type: string
        chain:
          type: string
        network:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          type: integer
          readOnly: true
    SmartContract:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        address:
          type: string
        chain:
          type: string
        network:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
        owner:
          type: integer
          readOnly: true
      required:
      - address
      - chain
      - created_at
      - id
      - name
      - network
      - owner
      - updated_at
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 255
        username:
          type: string
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        avatar:
          type: string
          maxLength: 225
        is_staff:
          type: boolean
      required:
      - created_at
      - email
      - id
      - updated_at
      - username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: http://localhost:3000/
  description: Localhost API base URL
