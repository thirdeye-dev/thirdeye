version: '3.8'

services:
  postgres:
    hostname: postgres
    image: library/postgres:12-alpine
    container_name: postgres_app_thirdeye
    networks:
      internal:
    volumes:
      - ../postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
  
  # frontend:
  #   hostname: frontend
  #   image: frontend_app_thirdeye
  #   container_name: frontend_app_thirdeye
  #   build:
  #     context: ../
  #     dockerfile: ./docker/Dockerfile.frontend
  #   networks:
  #     default:
  #     internal:
  #   volumes:
  #     - ../frontend:/usr/app
  #   env_file:
  #     - ./.env
    # ports:
    #  - "3000:3000"

  # nginx:
  #   hostname: nginx
  #   image: nginx:alpine
  #   container_name: nginx_app_thirdeye
  #   networks:
  #     default:
  #     internal:
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/nginx.conf
  #   ports:
  #     - "80:80"
  #   depends_on:
  #     # - frontend
  #     - backend

  backend:
    container_name: backend_app_thirdeye
    networks:
      default:
      internal:
    expose:
      - "8000"
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    entrypoint: ./docker/entrypoint/entrypoint.sh
    depends_on:
      - postgres
    ports:
      - "8000:8000"
    volumes:
      - ../:/app
    env_file:
      - ./.env

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    container_name: celery_thirdeye
    volumes:
      - ../:/app
    networks:
      default:
      internal:
    entrypoint: ./docker/entrypoint/entrypoint_celery.sh
    env_file:
      - ./.env
    restart: always
    depends_on:
      - redis
      - postgres

  celery_beat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.backend
    volumes:
      - ../:/app
    networks:
      default:
      internal:
    container_name: celery_beat_thirdeye
    entrypoint: ./docker/entrypoint/entrypoint_beat_celery.sh
    env_file:
      - ./.env
    depends_on:
      - redis
      - postgres

  rabbit:
    hostname: rabbit
    image: rabbitmq:3-management
    networks:
      default:
      internal:
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=mypass  # Redis - result backend

  redis:
    container_name: redis_app_thirdeye
    networks:
      default:
      internal:
    image: redis:alpine
  
  # secondeye:
  #   container_name: secondeye_app_thirdeye
  #   networks:
  #     default:
  #     internal:
  #   expose: 
  #     - "8080"
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile.secondeye
  #   volumes:
  #     - ../:/app
  #   env_file:
  #     - ./.env
  #   ports:
  #     - "8080:8080"
    

networks:
  default:
  internal:
    internal: true

